@startuml
!theme vibrant
actor User
participant ":Main" as Main
participant ":Parser" as Parser
participant ":InputValidator" as InputValidator
participant ":MarkCommand" as MarkCommand
participant ":InvalidCommand" as InvalidCommand
participant ":ExpenseManager" as ExpenseManager
participant ":Ui" as Ui
participant ":StorageManager" as StorageManager

User -> Main : enters "mark 1"
activate Main

Main -> Parser : parse("mark 1")
activate Parser

alt valid index
    Parser -> InputValidator : validateIndex("1", "mark")
    activate InputValidator
    InputValidator --> Parser : index = 1
    deactivate InputValidator

    create MarkCommand
    Parser -> MarkCommand : new MarkCommand(1)
    Parser --> Main : markCommand

else invalid index
    Parser -> InputValidator : validateIndex("invalid", "mark")
    activate InputValidator
    InputValidator -->> Parser : throws OrCashBuddyException
    deactivate InputValidator

    create InvalidCommand
    Parser -> InvalidCommand
    Parser --> Main : invalidCommand
end

deactivate Parser

alt valid mark command
    Main -> MarkCommand : execute(expenseManager, ui)
    activate MarkCommand

    MarkCommand -> ExpenseManager : markExpense(1)
    activate ExpenseManager
    ExpenseManager --> MarkCommand : markedExpense
    deactivate ExpenseManager

    MarkCommand -> Ui : showSeparator()
    activate Ui
    deactivate Ui

    MarkCommand -> Ui : showMarkedExpense(expense)
    activate Ui
    Ui --> User : displays confirmation
    deactivate Ui

    MarkCommand -> ExpenseManager : determineBudgetStatus()
    activate ExpenseManager
    ExpenseManager --> MarkCommand : status
    deactivate ExpenseManager

    opt status != OK
        MarkCommand -> Ui : showBudgetStatus(status, remainingBalance)
        activate Ui
        Ui --> User : displays budget alert
        deactivate Ui
    end

    MarkCommand -> Ui : showSeparator()
    activate Ui
    deactivate Ui

    deactivate MarkCommand
    destroy MarkCommand

    Main -> StorageManager : saveExpenseManager(expenseManager, ui)
    activate StorageManager
    StorageManager --> Main
    deactivate StorageManager

else invalid command
    Main -> InvalidCommand : execute(expenseManager, ui)
    activate InvalidCommand

    InvalidCommand -> Ui : showSeparator()
    activate Ui
    deactivate Ui

    InvalidCommand -> Ui : showMarkUsage()
    activate Ui
    Ui --> User : displays usage message
    deactivate Ui

    InvalidCommand -> Ui : showSeparator()
    activate Ui
    deactivate Ui

    deactivate InvalidCommand
    destroy InvalidCommand
end

deactivate Main
@enduml