@startuml
!theme vibrant
actor User
participant ":Main" as Main
participant ":Parser" as Parser
participant ":InputValidator" as InputValidator
participant ":MarkCommand" as MarkCommand
participant ":InvalidCommand" as InvalidCommand
participant ":ExpenseManager" as ExpenseManager
participant ":Expense" as Expense
participant ":Ui" as Ui

User -> Main : enters "mark 1"
activate Main

Main -> Parser : parse("mark 1")
activate Parser

alt successful parsing

    Parser -> InputValidator : validateIndex("1", "mark")
    activate InputValidator
    InputValidator --> Parser : 1
    deactivate InputValidator

    create MarkCommand
    Parser -> MarkCommand : 1
    Parser --> Main : markCommand

else validation fails

    Parser -> InputValidator : validateIndex("invalid", "mark")
    activate InputValidator
    InputValidator -->> Parser : throws OrCashBuddyException
    deactivate InputValidator

    create InvalidCommand
    Parser -> InvalidCommand : OrCashBuddyException
    Parser --> Main : invalidCommand

end

deactivate Parser

Main -> MarkCommand : execute(expenseManager, ui)
activate MarkCommand

MarkCommand -> ExpenseManager : markExpense(1)
activate ExpenseManager

ExpenseManager -> ExpenseManager : validateIndex(1)
note right: Throws OrCashBuddyException\nif index out of range

ExpenseManager -> Expense : mark()
activate Expense
Expense -> Expense : isMarked = true
deactivate Expense

ExpenseManager -> ExpenseManager : updateBudgetAfterMark(expense)
activate ExpenseManager
ExpenseManager -> ExpenseManager : totalExpenses += expense.getAmount()
ExpenseManager -> ExpenseManager : recalculateRemainingBalance()
note right: remainingBalance =\nbudget - totalExpenses
deactivate ExpenseManager

ExpenseManager --> MarkCommand : expense
deactivate ExpenseManager

MarkCommand -> Ui : showMarkedExpense(expense)
activate Ui
Ui --> User : displays "[X] [CATEGORY] DESCRIPTION - $AMOUNT"
deactivate Ui

MarkCommand -> ExpenseManager : checkRemainingBalance(ui)
activate ExpenseManager

alt remainingBalance < 0
    ExpenseManager -> Ui : showExceedAlert(remainingBalance)
    activate Ui
    Ui --> User : displays exceed alert
    deactivate Ui
else remainingBalance == 0
    ExpenseManager -> Ui : showEqualAlert()
    activate Ui
    Ui --> User : displays equal alert
    deactivate Ui
else remainingBalance < 10.00
    ExpenseManager -> Ui : showNearAlert(remainingBalance)
    activate Ui
    Ui --> User : displays near alert
    deactivate Ui
end

deactivate ExpenseManager

deactivate MarkCommand

alt command is invalid
    Main -> InvalidCommand : execute(expenseManager, ui)
    activate InvalidCommand
    InvalidCommand -> Ui : showMarkUsage(errorMessage)
    activate Ui
    Ui --> User : displays error message and usage
    deactivate Ui
    deactivate InvalidCommand
end

deactivate Main
@enduml
