@startuml
!theme vibrant
actor User
participant ":Main" as Main
participant ":Parser" as Parser
participant ":InputValidator" as InputValidator
participant ":DeleteCommand" as DeleteCommand
participant ":InvalidCommand" as InvalidCommand
participant ":ExpenseManager" as ExpenseManager
participant ":Ui" as Ui
participant ":StorageManager" as StorageManager

User -> Main : enters "delete 3"
activate Main

Main -> Parser : parse("delete 3")
activate Parser

alt valid index
    Parser -> InputValidator : validateIndex("3", "delete")
    activate InputValidator
    InputValidator --> Parser : index = 3
    deactivate InputValidator

    create DeleteCommand
    Parser -> DeleteCommand : new DeleteCommand(3)
    Parser --> Main : deleteCommand

else invalid index
    Parser -> InputValidator : validateIndex("invalid", "delete")
    activate InputValidator
    InputValidator -->> Parser : throws OrCashBuddyException
    deactivate InputValidator

    create InvalidCommand
    Parser -> InvalidCommand
    Parser --> Main : invalidCommand
end

deactivate Parser

alt valid delete command
    Main -> DeleteCommand : execute(expenseManager, ui)
    activate DeleteCommand

    DeleteCommand -> ExpenseManager : deleteExpense(3)
    activate ExpenseManager
    ExpenseManager --> DeleteCommand : removedExpense
    deactivate ExpenseManager

    DeleteCommand -> Ui : showDeletedExpense(expense)
    activate Ui
    Ui --> User : displays confirmation
    deactivate Ui

    deactivate DeleteCommand
    destroy DeleteCommand

    ' --- Persistence handled by Main ---
    Main -> StorageManager : saveExpenseManager(expenseManager, ui)
    activate StorageManager
    StorageManager --> Main
    deactivate StorageManager

else invalid command
    Main -> InvalidCommand : execute(expenseManager, ui)
    activate InvalidCommand
    InvalidCommand -> Ui : showError(message)
    activate Ui
    Ui --> User : displays error message
    deactivate Ui
    deactivate InvalidCommand
    destroy InvalidCommand
end

deactivate Main
@enduml
